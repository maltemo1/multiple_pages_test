import dash
from dash import dcc, html
import dash_bootstrap_components as dbc
import importlib
import os
import glob

app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])
server = app.server

# Categories and subcategories navigation structure
def create_nav_structure():
    return {
        "Überblick über Deutschlands Handel": {
            "Gesamtüberblick seit 2008 bis 2024": {
                "Gesamter Export-, Import- und Handelsvolumen-Verlauf Deutschlands": "gesamt_export_import_volumen"
            },
            "Überblick nach bestimmtem Jahr": {
                "Monatlicher Handelsverlauf": "monthly_trade",
                "Top 10 Handelspartner": "top_10_trade_partners"
            }
        },
        "Länderanalyse": {
            "Gesamtüberblick seit 2008 bis 2024": {
                "Gesamter Export-, Import- und Handelsvolumen-Verlauf mit Deutschland": "export_import_with_germany"
            }
        }
    }

categories = create_nav_structure()

def render_sidebar(categories):
    def create_items(subcategories):
        items = []
        for name, value in subcategories.items():
            if isinstance(value, dict):
                items.append(
                    dbc.AccordionItem(
                        dbc.Accordion(create_items(value), start_collapsed=True),
                        title=name
                    )
                )
            else:
                items.append(
                    html.Div(
                        html.A(name, href=f'/{value}', style={"textDecoration": "none", "color": "black", "padding": "5px", "display": "block"})
                    )
                )
        return items
    
    return dbc.Accordion([
        dbc.AccordionItem(
            dbc.Accordion(create_items(subcategories), start_collapsed=True),
            title=category
        )
        for category, subcategories in categories.items()
    ], start_collapsed=True)

sidebar = html.Div([
    html.H2("Navigation", className="display-4"),
    html.Hr(),
    render_sidebar(categories)
], className="sidebar")

app.layout = html.Div([
    dbc.Container([
        dbc.Row([
            dbc.Col(sidebar, width=3),
            dbc.Col(html.Div(id="page-content"), width=9)
        ])
    ])
])

# Dynamically import graph files and render the content
@app.callback(
    dash.dependencies.Output('page-content', 'children'),
    [dash.dependencies.Input('url', 'pathname')]
)
def render_graph(pathname):
    # Remove the leading '/' from the pathname
    graph_name = pathname.lstrip('/')
    try:
        # Dynamically import the graph module
        graph_module = importlib.import_module(f'graphs.{graph_name}')
        return graph_module.create_layout()
    except ModuleNotFoundError:
        return f"Graph {graph_name} not found", 404

# Add dcc.Location to allow URL navigation
app.layout = html.Div([
    dcc.Location(id='url', refresh=False),  # Added dcc.Location to track URL
    dbc.Container([
        dbc.Row([
            dbc.Col(sidebar, width=3),
            dbc.Col(html.Div(id="page-content"), width=9)
        ])
    ])
])

if __name__ == "__main__":
    app.run_server(debug=True)




################################################################################################################################################################






# -*- coding: utf-8 -*-
"""gesamt_export_import_volumen.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CTh654rMyHse7A9Od75MocvBgZft6U8b

# Vorbereitende Schritte
"""

import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import pandas as pd
import plotly.express as px
from statistics import mean
import glob
from statsmodels.tsa.seasonal import seasonal_decompose
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import to_rgba
from matplotlib.ticker import FuncFormatter
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
import plotly.graph_objects as go
import math
import gdown
import os

"""# Überblick über Deutschlands Handel

## Gesamtüberblick seit 2008 bis 2024

### Gesamter Export-, Import- und Handelsvolumen-Verlauf Deutschlands
"""

# CSV-Datei einlesen
df_gesamt_deutschland = pd.read_csv('data/1gesamt_deutschland.csv')

# Dash-App erstellen
app = dash.Dash(__name__)
server = app.server

app.layout = html.Div([
    html.H1("Deutschlands Handelsentwicklung"),
    dcc.Graph(id='handel_graph'),
])

@app.callback(
    Output('handel_graph', 'figure'),
    Input('handel_graph', 'id')
)
def update_graph(_):
    fig = go.Figure()

    # Linien für Export, Import und Handelsvolumen
    for col, name, color in zip(
        ['gesamt_export', 'gesamt_import', 'gesamt_handelsvolumen'],
        ['Exportvolumen', 'Importvolumen', 'Gesamthandelsvolumen'],
        ['#1f77b4', '#ff7f0e', '#2ca02c']
    ):
        fig.add_trace(go.Scatter(
            x=df_gesamt_deutschland['Jahr'],
            y=df_gesamt_deutschland[col],
            mode='lines+markers',
            name=name,
            line=dict(width=2, color=color),
            hovertemplate=f'<b>{name}</b><br>Jahr: %{{x}}<br>Wert: %{{y:,.0f}} € €<extra></extra>'
        ))

    # Berechnung der maximalen Y-Achse für Tick-Werte
    max_value = df_gesamt_deutschland[['gesamt_export', 'gesamt_import', 'gesamt_handelsvolumen']].values.max()
    tick_step = 500e9  # 500 Mrd als Schrittgröße
    tickvals = np.arange(0, max_value + tick_step, tick_step)

    # Layout-Anpassungen
    fig.update_layout(
        title='Entwicklung von Export, Import und Handelsvolumen',
        xaxis_title='Jahr',
        yaxis_title='Wert in €',
        yaxis=dict(
            tickformat=',',
            tickvals=tickvals,
            ticktext=[f"{val/1e9:.0f} Mrd" for val in tickvals]
        ),
        legend=dict(title='Kategorie', bgcolor='rgba(255,255,255,0.7)')
    )

    return fig

if __name__ == '__main__':
    app.run_server(debug=True)
